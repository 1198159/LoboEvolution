/* Generated By:JavaCC: Do not edit this line. SimpleCharStream.java Version 5.0 */
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.steadystate.css.parser;

import java.io.IOException;


/**
 * An implementation of interface CharStream.
 * There is no processing of escaping in this class because the escaping is
 * part of the parser. CSS has some strange rules about that, so processing
 * unicode escapes in this class is too early.
 */

public final class CssCharStream implements CharStream
{
  /** Whether parser is static. */
  public static final boolean staticFlag = false;

  /** The Constant BUFFER_SIZE. */
  private static final int BUFFER_SIZE = 2048;

  /** The bufsize. */
  int bufsize;
  
  /** The available. */
  int available;
  
  /** The token begin. */
  int tokenBegin;
  /** Position in buffer. */
  public int bufpos = -1;
  
  /** The bufline. */
  private int bufline[];
  
  /** The bufcolumn. */
  private int bufcolumn[];

  /** The column. */
  private int column = 0;
  
  /** The line. */
  private int line = 1;

  /** The prev char is cr. */
  private boolean prevCharIsCR = false;
  
  /** The prev char is lf. */
  private boolean prevCharIsLF = false;

  /** The input stream. */
  private java.io.Reader inputStream;

  /** The buffer. */
  private char[] buffer;
  
  /** The max next char ind. */
  private int maxNextCharInd = 0;
  
  /** The in buf. */
  private int inBuf = 0;

  /**
   * Expand buff.
   *
   * @param wrapAround the wrap around
   */
  private void ExpandBuff(boolean wrapAround)
  {
    char[] newbuffer = new char[bufsize + BUFFER_SIZE];
    int newbufline[] = new int[bufsize + BUFFER_SIZE];
    int newbufcolumn[] = new int[bufsize + BUFFER_SIZE];

    try
    {
      if (wrapAround)
      {
        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
        System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
        buffer = newbuffer;

        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
        System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
        bufline = newbufline;

        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
        System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
        bufcolumn = newbufcolumn;

        maxNextCharInd = (bufpos += (bufsize - tokenBegin));
      }
      else
      {
        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
        buffer = newbuffer;

        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
        bufline = newbufline;

        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
        bufcolumn = newbufcolumn;

        maxNextCharInd = (bufpos -= tokenBegin);
      }
    }
    catch (Throwable t)
    {
      throw new Error(t.getMessage());
    }

    bufsize += BUFFER_SIZE;
    available = bufsize;
    tokenBegin = 0;
  }

  /**
   * Fill buff.
   *
   * @throws IOException Signals that an I/O exception has occurred.
   */
  private final void FillBuff() throws java.io.IOException
  {
    if (maxNextCharInd == available)
    {
      if (available == bufsize)
      {
        if (tokenBegin > BUFFER_SIZE)
        {
          bufpos = maxNextCharInd = 0;
          available = tokenBegin;
        }
        else if (tokenBegin < 0)
          bufpos = maxNextCharInd = 0;
        else
          ExpandBuff(false);
      }
      else if (available > tokenBegin)
        available = bufsize;
      else if ((tokenBegin - available) < BUFFER_SIZE)
        ExpandBuff(true);
      else
        available = tokenBegin;
    }

    int i;
    try {
      if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1)
      {
        inputStream.close();
        throw new java.io.IOException();
      }

      maxNextCharInd += i;
      return;
    }
    catch(java.io.IOException e) {
      --bufpos;
      backup(0);
      if (tokenBegin == -1)
        tokenBegin = bufpos;
      throw e;
    }
  }

  /**
   *  Start.
   *
   * @return the char
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public final char BeginToken() throws IOException
  {
    tokenBegin = -1;
    char c = readChar();
    tokenBegin = bufpos;

    return c;
  }

  /**
   * Update line column.
   *
   * @param c the c
   */
  private final void UpdateLineColumn(char c)
  {
    column++;

    if (prevCharIsLF)
    {
      prevCharIsLF = false;
      line += (column = 1);
    }
    else if (prevCharIsCR)
    {
      prevCharIsCR = false;
      if (c == '\n')
      {
        prevCharIsLF = true;
      }
      else
        line += (column = 1);
    }

    switch (c)
    {
      case '\r' :
        prevCharIsCR = true;
        break;
      case '\n' :
        prevCharIsLF = true;
        break;
//        case '\t' :
//            column--;
//            column += (8 - (column & 07));
//            break;
      default :
        break;
    }

    bufline[bufpos] = line;
    bufcolumn[bufpos] = column;
  }

  /**
   *  Read a character.
   *
   * @return the char
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public final char readChar() throws IOException
  {
    if (inBuf > 0)
    {
      --inBuf;

      if (++bufpos == bufsize)
        bufpos = 0;

      return buffer[bufpos];
    }

    if (++bufpos >= maxNextCharInd)
      FillBuff();

    char c = buffer[bufpos];

    UpdateLineColumn(c);
    return c;
  }

  /* (non-Javadoc)
   * @see com.steadystate.css.parser.CharStream#getColumn()
   */
  @Deprecated
  /**
   * @deprecated
   * @see #getEndColumn
   */
  public final int getColumn() {
    return bufcolumn[bufpos];
  }

  /* (non-Javadoc)
   * @see com.steadystate.css.parser.CharStream#getLine()
   */
  @Deprecated
  /**
   * @deprecated
   * @see #getEndLine
   */
  public final int getLine() {
    return bufline[bufpos];
  }

  /**
   *  Get token end column number.
   *
   * @return the end column
   */
  public final int getEndColumn() {
    return bufcolumn[bufpos];
  }

  /**
   *  Get token end line number.
   *
   * @return the end line
   */
  public final int getEndLine() {
    return bufline[bufpos];
  }

  /**
   *  Get token beginning column number.
   *
   * @return the begin column
   */
  public final int getBeginColumn() {
    return bufcolumn[tokenBegin];
  }

  /**
   *  Get token beginning line number.
   *
   * @return the begin line
   */
  public final int getBeginLine() {
    return bufline[tokenBegin];
  }

  /**
   *  Backup a number of characters.
   *
   * @param amount the amount
   */
  public final void backup(int amount) {
    inBuf += amount;
    if ((bufpos -= amount) < 0)
      bufpos += bufsize;
  }

  /**
   *  Constructor.
   *
   * @param dstream the dstream
   * @param startline the startline
   * @param startcolumn the startcolumn
   * @param buffersize the buffersize
   */
  public CssCharStream(java.io.Reader dstream, int startline, int startcolumn, int buffersize)
  {
    inputStream = dstream;
    line = startline;
    column = startcolumn - 1;

    available = bufsize = buffersize;
    buffer = new char[buffersize];
    bufline = new int[buffersize];
    bufcolumn = new int[buffersize];
  }

  /**
   *  Constructor.
   *
   * @param dstream the dstream
   * @param startline the startline
   * @param startcolumn the startcolumn
   */
  public CssCharStream(java.io.Reader dstream, int startline,
                                                          int startcolumn)
  {
    this(dstream, startline, startcolumn, 4096);
  }

  /**
   *  Get token literal value.
   *
   * @return the string
   */
  public final String GetImage()
  {
    if (bufpos >= tokenBegin)
      return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
    return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
  }

  /**
   *  Get the suffix.
   *
   * @param len the len
   * @return the char[]
   */
  public final char[] GetSuffix(int len)
  {
    char[] ret = new char[len];

    if ((bufpos + 1) >= len)
      System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
    else
    {
      System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
      System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
    }

    return ret;
  }

  /** Reset buffer when finished. */
  public void Done()
  {
    buffer = null;
    bufline = null;
    bufcolumn = null;
  }

  /**
   * Method to adjust line and column numbers for the start of a token.
   *
   * @param newLine the new line
   * @param newCol the new col
   */
  public void adjustBeginLineColumn(int newLine, int newCol)
  {
    int start = tokenBegin;
    int len;

    if (bufpos >= tokenBegin)
    {
      len = bufpos - tokenBegin + inBuf + 1;
    }
    else
    {
      len = bufsize - tokenBegin + bufpos + 1 + inBuf;
    }

    int i = 0, j = 0, k = 0;
    int nextColDiff = 0, columnDiff = 0;

    while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize])
    {
      bufline[j] = newLine;
      nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
      bufcolumn[j] = newCol + columnDiff;
      columnDiff = nextColDiff;
      i++;
    }

    if (i < len)
    {
      bufline[j] = newLine++;
      bufcolumn[j] = newCol + columnDiff;

      while (i++ < len)
      {
        if (bufline[j = start % bufsize] != bufline[++start % bufsize])
          bufline[j] = newLine++;
        else
          bufline[j] = newLine;
      }
    }

    line = bufline[j];
    column = bufcolumn[j];
  }
}